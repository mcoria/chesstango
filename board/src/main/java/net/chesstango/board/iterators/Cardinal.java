package net.chesstango.board.iterators;

import net.chesstango.board.Square;

import java.util.Objects;

/**
 * @author Mauricio Coria
 */
public enum Cardinal {
    Norte(null, true, new long[]{
            0x0101010101010100L,
            0x0202020202020200L,
            0x0404040404040400L,
            0x0808080808080800L,
            0x1010101010101000L,
            0x2020202020202000L,
            0x4040404040404000L,
            0x8080808080808000L,
            0x0101010101010000L,
            0x0202020202020000L,
            0x0404040404040000L,
            0x0808080808080000L,
            0x1010101010100000L,
            0x2020202020200000L,
            0x4040404040400000L,
            0x8080808080800000L,
            0x0101010101000000L,
            0x0202020202000000L,
            0x0404040404000000L,
            0x0808080808000000L,
            0x1010101010000000L,
            0x2020202020000000L,
            0x4040404040000000L,
            0x8080808080000000L,
            0x0101010100000000L,
            0x0202020200000000L,
            0x0404040400000000L,
            0x0808080800000000L,
            0x1010101000000000L,
            0x2020202000000000L,
            0x4040404000000000L,
            0x8080808000000000L,
            0x0101010000000000L,
            0x0202020000000000L,
            0x0404040000000000L,
            0x0808080000000000L,
            0x1010100000000000L,
            0x2020200000000000L,
            0x4040400000000000L,
            0x8080800000000000L,
            0x0101000000000000L,
            0x0202000000000000L,
            0x0404000000000000L,
            0x0808000000000000L,
            0x1010000000000000L,
            0x2020000000000000L,
            0x4040000000000000L,
            0x8080000000000000L,
            0x0100000000000000L,
            0x0200000000000000L,
            0x0400000000000000L,
            0x0800000000000000L,
            0x1000000000000000L,
            0x2000000000000000L,
            0x4000000000000000L,
            0x8000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L
    }), Sur(null, false, new long[]{
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000001L,
            0x0000000000000002L,
            0x0000000000000004L,
            0x0000000000000008L,
            0x0000000000000010L,
            0x0000000000000020L,
            0x0000000000000040L,
            0x0000000000000080L,
            0x0000000000000101L,
            0x0000000000000202L,
            0x0000000000000404L,
            0x0000000000000808L,
            0x0000000000001010L,
            0x0000000000002020L,
            0x0000000000004040L,
            0x0000000000008080L,
            0x0000000000010101L,
            0x0000000000020202L,
            0x0000000000040404L,
            0x0000000000080808L,
            0x0000000000101010L,
            0x0000000000202020L,
            0x0000000000404040L,
            0x0000000000808080L,
            0x0000000001010101L,
            0x0000000002020202L,
            0x0000000004040404L,
            0x0000000008080808L,
            0x0000000010101010L,
            0x0000000020202020L,
            0x0000000040404040L,
            0x0000000080808080L,
            0x0000000101010101L,
            0x0000000202020202L,
            0x0000000404040404L,
            0x0000000808080808L,
            0x0000001010101010L,
            0x0000002020202020L,
            0x0000004040404040L,
            0x0000008080808080L,
            0x0000010101010101L,
            0x0000020202020202L,
            0x0000040404040404L,
            0x0000080808080808L,
            0x0000101010101010L,
            0x0000202020202020L,
            0x0000404040404040L,
            0x0000808080808080L,
            0x0001010101010101L,
            0x0002020202020202L,
            0x0004040404040404L,
            0x0008080808080808L,
            0x0010101010101010L,
            0x0020202020202020L,
            0x0040404040404040L,
            0x0080808080808080L}),
    Este(true, null, new long[]{
            0x00000000000000FEL,
            0x00000000000000FCL,
            0x00000000000000F8L,
            0x00000000000000F0L,
            0x00000000000000E0L,
            0x00000000000000C0L,
            0x0000000000000080L,
            0x0000000000000000L,
            0x000000000000FE00L,
            0x000000000000FC00L,
            0x000000000000F800L,
            0x000000000000F000L,
            0x000000000000E000L,
            0x000000000000C000L,
            0x0000000000008000L,
            0x0000000000000000L,
            0x0000000000FE0000L,
            0x0000000000FC0000L,
            0x0000000000F80000L,
            0x0000000000F00000L,
            0x0000000000E00000L,
            0x0000000000C00000L,
            0x0000000000800000L,
            0x0000000000000000L,
            0x00000000FE000000L,
            0x00000000FC000000L,
            0x00000000F8000000L,
            0x00000000F0000000L,
            0x00000000E0000000L,
            0x00000000C0000000L,
            0x0000000080000000L,
            0x0000000000000000L,
            0x000000FE00000000L,
            0x000000FC00000000L,
            0x000000F800000000L,
            0x000000F000000000L,
            0x000000E000000000L,
            0x000000C000000000L,
            0x0000008000000000L,
            0x0000000000000000L,
            0x0000FE0000000000L,
            0x0000FC0000000000L,
            0x0000F80000000000L,
            0x0000F00000000000L,
            0x0000E00000000000L,
            0x0000C00000000000L,
            0x0000800000000000L,
            0x0000000000000000L,
            0x00FE000000000000L,
            0x00FC000000000000L,
            0x00F8000000000000L,
            0x00F0000000000000L,
            0x00E0000000000000L,
            0x00C0000000000000L,
            0x0080000000000000L,
            0x0000000000000000L,
            0xFE00000000000000L,
            0xFC00000000000000L,
            0xF800000000000000L,
            0xF000000000000000L,
            0xE000000000000000L,
            0xC000000000000000L,
            0x8000000000000000L,
            0x0000000000000000L
    }),
    Oeste(false, null, new long[]{
            0x0000000000000000L,
            0x0000000000000001L,
            0x0000000000000003L,
            0x0000000000000007L,
            0x000000000000000FL,
            0x000000000000001FL,
            0x000000000000003FL,
            0x000000000000007FL,
            0x0000000000000000L,
            0x0000000000000100L,
            0x0000000000000300L,
            0x0000000000000700L,
            0x0000000000000F00L,
            0x0000000000001F00L,
            0x0000000000003F00L,
            0x0000000000007F00L,
            0x0000000000000000L,
            0x0000000000010000L,
            0x0000000000030000L,
            0x0000000000070000L,
            0x00000000000F0000L,
            0x00000000001F0000L,
            0x00000000003F0000L,
            0x00000000007F0000L,
            0x0000000000000000L,
            0x0000000001000000L,
            0x0000000003000000L,
            0x0000000007000000L,
            0x000000000F000000L,
            0x000000001F000000L,
            0x000000003F000000L,
            0x000000007F000000L,
            0x0000000000000000L,
            0x0000000100000000L,
            0x0000000300000000L,
            0x0000000700000000L,
            0x0000000F00000000L,
            0x0000001F00000000L,
            0x0000003F00000000L,
            0x0000007F00000000L,
            0x0000000000000000L,
            0x0000010000000000L,
            0x0000030000000000L,
            0x0000070000000000L,
            0x00000F0000000000L,
            0x00001F0000000000L,
            0x00003F0000000000L,
            0x00007F0000000000L,
            0x0000000000000000L,
            0x0001000000000000L,
            0x0003000000000000L,
            0x0007000000000000L,
            0x000F000000000000L,
            0x001F000000000000L,
            0x003F000000000000L,
            0x007F000000000000L,
            0x0000000000000000L,
            0x0100000000000000L,
            0x0300000000000000L,
            0x0700000000000000L,
            0x0F00000000000000L,
            0x1F00000000000000L,
            0x3F00000000000000L,
            0x7F00000000000000L
    }),
    NorteEste(true, true, new long[]{
            0x8040201008040200L,
            0x0080402010080400L,
            0x0000804020100800L,
            0x0000008040201000L,
            0x0000000080402000L,
            0x0000000000804000L,
            0x0000000000008000L,
            0x0000000000000000L,
            0x4020100804020000L,
            0x8040201008040000L,
            0x0080402010080000L,
            0x0000804020100000L,
            0x0000008040200000L,
            0x0000000080400000L,
            0x0000000000800000L,
            0x0000000000000000L,
            0x2010080402000000L,
            0x4020100804000000L,
            0x8040201008000000L,
            0x0080402010000000L,
            0x0000804020000000L,
            0x0000008040000000L,
            0x0000000080000000L,
            0x0000000000000000L,
            0x1008040200000000L,
            0x2010080400000000L,
            0x4020100800000000L,
            0x8040201000000000L,
            0x0080402000000000L,
            0x0000804000000000L,
            0x0000008000000000L,
            0x0000000000000000L,
            0x0804020000000000L,
            0x1008040000000000L,
            0x2010080000000000L,
            0x4020100000000000L,
            0x8040200000000000L,
            0x0080400000000000L,
            0x0000800000000000L,
            0x0000000000000000L,
            0x0402000000000000L,
            0x0804000000000000L,
            0x1008000000000000L,
            0x2010000000000000L,
            0x4020000000000000L,
            0x8040000000000000L,
            0x0080000000000000L,
            0x0000000000000000L,
            0x0200000000000000L,
            0x0400000000000000L,
            0x0800000000000000L,
            0x1000000000000000L,
            0x2000000000000000L,
            0x4000000000000000L,
            0x8000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L
    }),
    SurEste(true, false, new long[]{
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000002L,
            0x0000000000000004L,
            0x0000000000000008L,
            0x0000000000000010L,
            0x0000000000000020L,
            0x0000000000000040L,
            0x0000000000000080L,
            0x0000000000000000L,
            0x0000000000000204L,
            0x0000000000000408L,
            0x0000000000000810L,
            0x0000000000001020L,
            0x0000000000002040L,
            0x0000000000004080L,
            0x0000000000008000L,
            0x0000000000000000L,
            0x0000000000020408L,
            0x0000000000040810L,
            0x0000000000081020L,
            0x0000000000102040L,
            0x0000000000204080L,
            0x0000000000408000L,
            0x0000000000800000L,
            0x0000000000000000L,
            0x0000000002040810L,
            0x0000000004081020L,
            0x0000000008102040L,
            0x0000000010204080L,
            0x0000000020408000L,
            0x0000000040800000L,
            0x0000000080000000L,
            0x0000000000000000L,
            0x0000000204081020L,
            0x0000000408102040L,
            0x0000000810204080L,
            0x0000001020408000L,
            0x0000002040800000L,
            0x0000004080000000L,
            0x0000008000000000L,
            0x0000000000000000L,
            0x0000020408102040L,
            0x0000040810204080L,
            0x0000081020408000L,
            0x0000102040800000L,
            0x0000204080000000L,
            0x0000408000000000L,
            0x0000800000000000L,
            0x0000000000000000L,
            0x0002040810204080L,
            0x0004081020408000L,
            0x0008102040800000L,
            0x0010204080000000L,
            0x0020408000000000L,
            0x0040800000000000L,
            0x0080000000000000L,
            0x0000000000000000L
    }),
    SurOeste(false, false, new long[]{
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000001L,
            0x0000000000000002L,
            0x0000000000000004L,
            0x0000000000000008L,
            0x0000000000000010L,
            0x0000000000000020L,
            0x0000000000000040L,
            0x0000000000000000L,
            0x0000000000000100L,
            0x0000000000000201L,
            0x0000000000000402L,
            0x0000000000000804L,
            0x0000000000001008L,
            0x0000000000002010L,
            0x0000000000004020L,
            0x0000000000000000L,
            0x0000000000010000L,
            0x0000000000020100L,
            0x0000000000040201L,
            0x0000000000080402L,
            0x0000000000100804L,
            0x0000000000201008L,
            0x0000000000402010L,
            0x0000000000000000L,
            0x0000000001000000L,
            0x0000000002010000L,
            0x0000000004020100L,
            0x0000000008040201L,
            0x0000000010080402L,
            0x0000000020100804L,
            0x0000000040201008L,
            0x0000000000000000L,
            0x0000000100000000L,
            0x0000000201000000L,
            0x0000000402010000L,
            0x0000000804020100L,
            0x0000001008040201L,
            0x0000002010080402L,
            0x0000004020100804L,
            0x0000000000000000L,
            0x0000010000000000L,
            0x0000020100000000L,
            0x0000040201000000L,
            0x0000080402010000L,
            0x0000100804020100L,
            0x0000201008040201L,
            0x0000402010080402L,
            0x0000000000000000L,
            0x0001000000000000L,
            0x0002010000000000L,
            0x0004020100000000L,
            0x0008040201000000L,
            0x0010080402010000L,
            0x0020100804020100L,
            0x0040201008040201L
    }),
    NorteOeste(false, true, new long[]{
            0x0000000000000000L,
            0x0000000000000100L,
            0x0000000000010200L,
            0x0000000001020400L,
            0x0000000102040800L,
            0x0000010204081000L,
            0x0001020408102000L,
            0x0102040810204000L,
            0x0000000000000000L,
            0x0000000000010000L,
            0x0000000001020000L,
            0x0000000102040000L,
            0x0000010204080000L,
            0x0001020408100000L,
            0x0102040810200000L,
            0x0204081020400000L,
            0x0000000000000000L,
            0x0000000001000000L,
            0x0000000102000000L,
            0x0000010204000000L,
            0x0001020408000000L,
            0x0102040810000000L,
            0x0204081020000000L,
            0x0408102040000000L,
            0x0000000000000000L,
            0x0000000100000000L,
            0x0000010200000000L,
            0x0001020400000000L,
            0x0102040800000000L,
            0x0204081000000000L,
            0x0408102000000000L,
            0x0810204000000000L,
            0x0000000000000000L,
            0x0000010000000000L,
            0x0001020000000000L,
            0x0102040000000000L,
            0x0204080000000000L,
            0x0408100000000000L,
            0x0810200000000000L,
            0x1020400000000000L,
            0x0000000000000000L,
            0x0001000000000000L,
            0x0102000000000000L,
            0x0204000000000000L,
            0x0408000000000000L,
            0x0810000000000000L,
            0x1020000000000000L,
            0x2040000000000000L,
            0x0000000000000000L,
            0x0100000000000000L,
            0x0200000000000000L,
            0x0400000000000000L,
            0x0800000000000000L,
            0x1000000000000000L,
            0x2000000000000000L,
            0x4000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L,
            0x0000000000000000L
    });

    private final Boolean east;
    private final Boolean north;
    private final int offSetEast;
    private final int offSetNorth;
    private final long[] squaresInDirection;

    Cardinal(Boolean east, Boolean north, long[] squaresInDirection) {
        this.east = east;
        this.north = north;

        this.offSetEast = this.east == null ? 0 : (this.east ? 1 : -1);
        this.offSetNorth = this.north == null ? 0 : (this.north ? 1 : -1);
        this.squaresInDirection = squaresInDirection;
    }

    public Square nextSquare(Square from) {
        return Square.of(from.getFile() + offSetEast, from.getRank() + offSetNorth);
    }

    public long getSquaresInDirection(Square square) {
        return squaresInDirection[square.idx()];
    }


    public boolean isInDirection(Square from, Square to) {
        if (Objects.equals(east, getDirection(from.getFile(), to.getFile()))) {
            if (Objects.equals(north, getDirection(from.getRank(), to.getRank()))) {
                if (east == null) { // Puede ser mismo lugar; NORTE o SUR
                    if (north == null) {
                        throw new RuntimeException("from equals to");
                    } else { // NORTE o SUR
                        return true;
                    }
                } else if (east.equals(true)) { // Puede ser Este, NorteEste; SurEste
                    if (north == null) { // Este
                        return true;
                    } else if (north.equals(true)) { // NorteEste
                        return to.getFile() - from.getFile() == to.getRank() - from.getRank();
                    } else { // norte.equals(false) --  SurEste
                        return to.getFile() - from.getFile() == from.getRank() - to.getRank();
                    }
                } else { // este.equals(false)  -- Puede ser Oeste,NorteOeste, SurOeste
                    if (north == null) { // Oeste
                        return true;
                    } else if (north.equals(true)) { // NorteOeste
                        return from.getFile() - to.getFile() == to.getRank() - from.getRank();
                    } else { // norte.equals(false) SurOeste
                        return from.getFile() - to.getFile() == from.getRank() - to.getRank();
                    }
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public Cardinal getOpposite() {
        return switch (this) {
            case Norte -> Sur;
            case Sur -> Norte;
            case Este -> Oeste;
            case Oeste -> Este;
            case NorteEste -> SurOeste;
            case SurEste -> NorteOeste;
            case SurOeste -> NorteEste;
            case NorteOeste -> SurEste;
        };
    }

    public static Cardinal calculateSquaresDirection(Square from, Square to) {
        for (Cardinal direction : Cardinal.values()) {
            if (direction.isInDirection(from, to)) {
                return direction;
            }
        }
        return null;
    }

    private static Boolean getDirection(int from, int to) {
        if (from == to) {
            return null;
        } else {
            return from < to;
        }
    }
}